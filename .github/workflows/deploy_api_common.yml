name: deploy_api_common
on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string

env:
  DEPLOY_ENV: ${{ inputs.env }}

jobs:
  build-app:
    runs-on: ubuntu-20.04
    environment: ${{ inputs.env }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: docker/setup-buildx-action@v2

      - uses: ./.github/actions/install_dependencies
      # NOTE: terraformで生成したインフラ情報を参照してコンテナをビルドする
      - uses: moajo/terraform-metadata@v1
        with:
          metadata_path: terraform/env/${{ inputs.env }}/meta.json
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      - uses: docker/build-push-action@v4
        with:
          context: ./api
          push: true
          tags: ${{ env.ECR_URL_APP }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-app:
    needs:
      - build-app
    runs-on: ubuntu-20.04
    environment: ${{ inputs.env }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      # # NOTE: terraformで生成したインフラ情報を参照してコンテナをビルドする
      - uses: moajo/terraform-metadata@v1
        with:
          metadata_path: terraform/env/${{ inputs.env }}/meta.json
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      # NOTE: terraformで生成したタスク定義テンプレートにビルドしたimageのIDを埋め込んで完成させる
      - name: Fill in the new image ID in the Amazon ECS task definition
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: envsubst < terraform/metadata_outputs/${DEPLOY_ENV}/task_def.template.json > taskdef.json && cat taskdef.json
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: taskdef.json
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true # CI完了時に未反映だと面倒なので、デプロイ完了まで待つ
